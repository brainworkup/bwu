# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: ubuntu-18.04,   r: 'devel'}
          - {os: ubuntu-18.04,   r: 'release'}
          - {os: ubuntu-18.04,   r: 'oldrel'}
          - {os: ubuntu-18.04,   r: '3.5'}
            # - {os: ubuntu-18.04,   r: '3.4'}  # needs rmarkdown patch

    env:
      _R_CHECK_CRAN_INCOMING_:       "FALSE"
      _R_CHECK_RD_XREFS:             "FALSE"
      _R_CHECK_PACKAGE_NAME_:        "renv"
      GITHUB_PAT:                    "${{ secrets.GITHUB_TOKEN }}"
      RENV_CI_CACHE_VERSION_LINUX:   "1"
      RENV_CI_CACHE_VERSION_MACOS:   "1"
      USE_CXX1X:                     "TRUE"
      USE_CXX11:                     "TRUE"

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install renv
        shell: bash
        run: R CMD INSTALL --preclean .

      - name: Write diagnostics report
        shell: R --no-save --no-restore --quiet -f {0}
        run: renv::diagnostics()

      - name: Generate dependency list
        shell: R --no-save --no-restore --quiet -f {0}
        run: renv:::renv_ci_dependencies()

      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ matrix.config.os }}-renv-${{ hashFiles('ci/version.rds') }}-${{ hashFiles('ci/dependencies.rds') }}
          restore-keys: |
            ${{ matrix.config.os }}-renv-${{ hashFiles('ci/version.rds') }}-
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:cran/libgit2
          sudo apt-get update
          sudo apt-get install -y make
          sudo apt-get install -y git
          sudo apt-get install -y libcurl4-openssl-dev
          sudo apt-get install -y libgit2-dev
          sudo apt-get install -y libicu-dev
          sudo apt-get install -y libssl-dev
          sudo apt-get install -y libxml2-dev
          sudo apt-get install -y python3
          sudo apt-get install -y python3-pip
          sudo apt-get install -y python3-venv
          
      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install git
          brew install libgit2
          brew install pandoc
      
      - name: Install renv
        shell: bash
        run: R CMD INSTALL --preclean .
        
      - name: Install tabulizer
        shell: bash
        run: R CMD INSTALL --preclean .

      - name: Repair broken packages
        shell: R --no-save --no-restore --quiet -f {0}
        run: renv:::renv_ci_repair()

      - name: Update R dependencies
        shell: R --no-save --no-restore --quiet -f {0}
        env:
          RENV_CONFIG_REPOS_OVERRIDE: https://packagemanager.rstudio.com/cran/latest
          RENV_CONFIG_CACHE_ENABLED: FALSE
        run: |
          renv::install()
          renv::update()
      - name: Write diagnostics report
        shell: R --no-save --no-restore --quiet -f {0}
        run: renv::diagnostics()

      - name: Check renv
        shell: bash
        run: |
          mkdir -p check
          R CMD build --no-manual .
          R CMD check --no-manual -o check *.tar.gz
        env:
          _R_CHECK_LENGTH_1_CONDITION_: TRUE
          _R_CHECK_LENGTH_1_LOGIC2_: TRUE

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r-${{ matrix.config.r }}-results
          path: check
